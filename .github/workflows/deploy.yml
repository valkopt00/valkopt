name: Atualizar JSON de Notícias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout completo do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Mudar para branch `data` e preparar
        run: |
          git fetch origin data || true
          if git show-ref --verify --quiet refs/remotes/origin/data; then
            git checkout data
            echo "Branch data existe - ficheiros preservados"
            ls -la articles/ || echo "Pasta articles não existe ainda"
          else
            git checkout --orphan data
            git reset --hard
            echo "Branch data criado - começando do zero"
            mkdir -p articles public
          fi
          
          # Garantir que as pastas existem
          mkdir -p articles public

      - name: Extrair scripts e requirements da branch `main`
        run: |
          mkdir -p temp-scripts/scripts/exporters
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('temp-scripts/requirements.txt') }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Limpar ficheiros corrompidos (se existirem)
        run: |
          # Verificar e limpar ficheiros com formato incorreto
          if [ -f "articles/original_categories.json" ]; then
            if ! python -c "
            import json
            try:
                with open('articles/original_categories.json', 'r') as f:
                    data = json.load(f)
                # Verificar se é um array
                if not isinstance(data, list):
                    exit(1)
            except:
                exit(1)
            " 2>/dev/null; then
                echo "Removendo ficheiro original_categories.json com formato incorreto"
                rm -f articles/original_categories.json
            else
                echo "Ficheiro original_categories.json tem formato correto - mantendo"
            fi
          else
            echo "Ficheiro original_categories.json não existe - será criado pelo script"
          fi

      - name: Instalar dependências
        run: pip install -r temp-scripts/requirements.txt

      - name: Executar script de atualização de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      - name: Debug - Verificar ficheiros após script
        run: |
          echo "=== Ficheiros criados pelo script ==="
          ls -la articles/
          echo "=== Conteúdo do original_categories.json (se existir) ==="
          if [ -f "articles/original_categories.json" ]; then
            echo "Ficheiro existe!"
            cat articles/original_categories.json | head -20
            echo "=== Formato do ficheiro ==="
            python -c "
            import json
            with open('articles/original_categories.json', 'r') as f:
                data = json.load(f)
                print('Type:', type(data))
                print('Length:', len(data) if isinstance(data, list) else 'N/A')
                print('First few entries:', data[:2] if isinstance(data, list) and len(data) > 0 else 'Empty or not a list')
            "
          else
            echo "Ficheiro NÃO existe!"
          fi    

      - name: Garantir pasta public e copiar JSONs
        run: |
          mkdir -p public
          cp articles/*.json public/

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Ficheiros JSON" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md

      - name: Commit e Push para branch `data`
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualização automática dos ficheiros JSON - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudança para commitar"
          fi