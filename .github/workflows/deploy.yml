name: Atualizar JSON de Notícias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  # Job 1: Gerar JSONs na branch main (SEM MANTER JSONs NO MAIN)
generate-json:
  runs-on: ubuntu-latest
  steps:
    - name: Clonar repositório
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Instalar dependências
      run: pip install -r requirements.txt
      
    - name: Criar estrutura de pastas temporárias
      run: |
        mkdir -p articles public
        
    - name: Executar script para atualizar JSON
      run: |
        export PYTHONPATH=$(pwd)
        python scripts/RSS_API.py

    - name: Copiar ficheiros JSON para pasta public
      run: |
        cp articles/articles.json public/articles.json
        cp articles/articles_priority.json public/articles_priority.json
        cp articles/articles_secondary.json public/articles_secondary.json
        
    - name: Upload dos ficheiros JSON
      uses: actions/upload-artifact@v4
      with:
        name: json-files
        path: |
          articles/articles.json
          articles/articles_priority.json
          articles/articles_secondary.json
          articles/original_categories.json
          public/articles.json
          public/articles_priority.json
          public/articles_secondary.json
          articles/date_test.json
          
    - name: Limpar ficheiros temporários (manter main limpo)
      run: |
        rm -rf articles public

  # Job 2: Atualizar branch data (OTIMIZADO)
  update-data-branch:
    runs-on: ubuntu-latest
    needs: generate-json
    steps:
      - name: Clonar repositório (shallow clone)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Apenas o último commit
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configurar Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Download dos ficheiros JSON
        uses: actions/download-artifact@v4
        with:
          name: json-files
          path: json-temp/
          
      - name: Configurar e atualizar branch data
        run: |
          # Verificar se branch data existe remotamente
          if git ls-remote --exit-code --heads origin data > /dev/null 2>&1; then
            # Branch existe - fazer checkout
            git fetch origin data:data --depth=1
            git checkout data
          else
            # Branch não existe - criar nova
            git checkout --orphan data
            git rm -rf . || true
          fi

          # Preparar estrutura (mais eficiente)
          mkdir -p articles public
          
          # Mover ficheiros diretamente (sem cp)
          mv json-temp/articles/*.json articles/ 2>/dev/null || true
          mv json-temp/public/*.json public/ 2>/dev/null || true
          
          # Criar README de forma mais eficiente
          printf "# Branch Data - Ficheiros JSON\nAtualizado automaticamente em: %s\n" "$(date)" > README.md
          
          # Limpeza
          rm -rf json-temp

      - name: Commit e Push (otimizado)
        run: |
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Auto-update JSON files - $(date '+%Y-%m-%d %H:%M')"
            git push origin data
          else
            echo "Nenhuma mudança para commitar"
          fi