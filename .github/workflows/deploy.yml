name: Atualizar JSON de Notícias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  # Job 1: Gerar JSONs na branch main
  generate-json:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositório
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Instalar dependências
        run: pip install -r requirements.txt
        
      - name: Executar script para atualizar JSON
        run: |
          export PYTHONPATH=$(pwd)
          python scripts/RSS_API.py

      - name: Gerar date_test.json
        run: |
          python - << 'EOF'
          import json

          # load the freshly generated JSON
          with open('articles/articles.json', encoding='utf-8') as f:
              data = json.load(f)

          # write a brand‑new JSON from scratch
          with open('articles/date_test.json', 'w', encoding='utf-8') as f:
              json.dump(data, f, ensure_ascii=False, indent=2)
          EOF
        
      - name: Copiar ficheiros JSON para pasta public
        run: |
          cp articles/articles.json public/articles.json
          cp articles/articles_priority.json public/articles_priority.json
          cp articles/articles_secondary.json public/articles_secondary.json
          
      - name: Upload dos ficheiros JSON
        uses: actions/upload-artifact@v4
        with:
          name: json-files
          path: |
            articles/articles.json
            articles/articles_priority.json
            articles/articles_secondary.json
            articles/original_categories.json
            public/articles.json
            public/articles_priority.json
            public/articles_secondary.json
            # incluir também o ficheiro de teste
            articles/date_test.json

  # Job 2: Atualizar branch data
  update-data-branch:
    runs-on: ubuntu-latest
    needs: generate-json
    steps:
      - name: Clonar repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Configurar Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Configurar branch data
        run: |
          # Verificar se branch data existe
          if git ls-remote --heads origin data | grep -q data; then
            git fetch origin data
            git checkout data
          else
            git checkout --orphan data
          fi

          # Limpar estrutura anterior
          find . -maxdepth 1 -type f ! -name '.gitignore' -delete || true
          rm -rf articles public json-temp || true
          mkdir -p articles public json-temp

      - name: Download dos ficheiros JSON
        uses: actions/download-artifact@v4
        with:
          name: json-files
          path: json-temp/
          
      - name: Copiar ficheiros JSON para estrutura limpa
        run: |
          cp json-temp/articles/articles.json articles/
          cp json-temp/articles/articles_priority.json articles/
          cp json-temp/articles/articles_secondary.json articles/
          cp json-temp/articles/original_categories.json articles/
          cp json-temp/public/articles.json public/
          cp json-temp/public/articles_priority.json public/
          cp json-temp/public/articles_secondary.json public/
          
          # Criar README
          echo "# Branch Data - Ficheiros JSON" > README.md
          echo "Atualizado automaticamente em: $(date)" >> README.md

      - name: Commit e Push para branch data
        run: |
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualização automática dos ficheiros JSON - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data
          else
            echo "Nenhuma mudança para commitar"
          fi  