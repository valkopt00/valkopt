name: Atualizar JSON de Not√≠cias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout completo do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Mudar para branch `data` e preparar
        run: |
          git fetch origin data || true
          if git show-ref --verify --quiet refs/remotes/origin/data; then
            git checkout data
          else
            git checkout --orphan data
            git reset --hard
          fi
          mkdir -p articles public
          
          # Criar ficheiro original_categories.json vazio se n√£o existir
          if [ ! -f "articles/original_categories.json" ]; then
            echo '{"categories": {}, "articles": {}}' > articles/original_categories.json
          fi

      - name: Extrair scripts e requirements da branch `main`
        run: |
          mkdir -p temp-scripts/scripts/exporters
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('temp-scripts/requirements.txt') }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar depend√™ncias
        run: pip install -r temp-scripts/requirements.txt

      - name: Executar script de atualiza√ß√£o de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      - name: Garantir pasta public e copiar ficheiros JSON
        run: |
          mkdir -p public
          # Copiar apenas os ficheiros JSON essenciais
          cp articles/articles.json public/
          cp articles/articles_search.json public/
          cp articles/original_categories.json public/
          
          # Copiar ficheiros HTML est√°ticos da branch main (se existirem)
          if git show origin/main:public/politica_de_privacidade.html > /dev/null 2>&1; then
            git show origin/main:public/politica_de_privacidade.html > public/politica_de_privacidade.html
          fi
          
          if git show origin/main:public/termos_de_utilizacao.html > /dev/null 2>&1; then
            git show origin/main:public/termos_de_utilizacao.html > public/termos_de_utilizacao.html
          fi

          if git show origin/main:public/contacto.html > /dev/null 2>&1; then
            git show origin/main:public/contacto.html > public/contacto.html
          fi

          if git show origin/main:public/app-ads.txt > /dev/null 2>&1; then
            git show origin/main:public/app-ads.txt > public/app-ads.txt
          fi

      # ‚úÖ Netlify vai comprimir automaticamente - sem necessidade de compress√£o manual

      - name: Verificar ficheiros gerados
        run: |
          echo "üìÅ Ficheiros na pasta articles:"
          ls -la articles/
          echo ""
          echo "üìÅ Ficheiros na pasta public:"
          ls -la public/
          echo ""
          cd public
          if [ -f "articles.json" ]; then
            size=$(stat -c%s "articles.json")
            echo "   ‚úÖ articles.json: $(numfmt --to=iec $size) (todas as not√≠cias)"
          else
            echo "   ‚ùå articles.json N√ÉO foi criado"
          fi
          
          if [ -f "articles_search.json" ]; then
            size=$(stat -c%s "articles_search.json")
            echo "   ‚úÖ articles_search.json: $(numfmt --to=iec $size) (dados de pesquisa)"
          else
            echo "   ‚ùå articles_search.json N√ÉO foi criado"
          fi
          
          if [ -f "original_categories.json" ]; then
            size=$(stat -c%s "original_categories.json")
            echo "   ‚úÖ original_categories.json: $(numfmt --to=iec $size) (mapeamento)"
          else
            echo "   ‚ùå original_categories.json N√ÉO foi criado"
          fi

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Sistema JSON Simplificado" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
          echo "" >> README.md
          echo "## üéØ Arquitetura simplificada:" >> README.md
          echo "Apenas **3 ficheiros JSON** essenciais, comprimidos automaticamente pelo Netlify (~65% redu√ß√£o):" >> README.md
          echo "" >> README.md
          echo "### üì± Para a app principal:" >> README.md
          echo "- **articles.json** - Todas as categorias e artigos (ficheiro √∫nico)" >> README.md
          echo "" >> README.md
          echo "### üîç Para funcionalidade de pesquisa:" >> README.md  
          echo "- **articles_search.json** - Dados normalizados para pesquisa" >> README.md
          echo "" >> README.md
          echo "### üóÇÔ∏è Para mapeamento de categorias:" >> README.md
          echo "- **original_categories.json** - Mapeamento de categorias originais" >> README.md
          echo "" >> README.md
          echo "## ‚ö° Performance esperada:" >> README.md
          cd public
          if [ -f "articles.json" ]; then
            size=$(stat -c%s "articles.json")
            compressed_size=$((size * 35 / 100))
            echo "- **Carregamento inicial**: ~$(numfmt --to=iec $compressed_size) (2-4 segundos)" >> ../README.md
            echo "- **Todas as categorias**: Dispon√≠veis imediatamente ap√≥s carregamento" >> ../README.md
            echo "- **Zero problemas de timing**: Sem depend√™ncias entre ficheiros" >> ../README.md
          fi

      - name: Commit e Push para branch `data`
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualiza√ß√£o autom√°tica dos ficheiros JSON comprimidos - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudan√ßa para commitar"
          fi