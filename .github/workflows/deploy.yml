name: Atualizar JSON de Notícias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout completo do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Mudar para branch `data` e preparar
        run: |
          git fetch origin data || true
          if git show-ref --verify --quiet refs/remotes/origin/data; then
            git checkout data
            echo "Branch data existe - ficheiros preservados"
            ls -la articles/ || echo "Pasta articles não existe ainda"
          else
            git checkout --orphan data
            git reset --hard
            echo "Branch data criado - começando do zero"
            mkdir -p articles public
          fi
          
          # Garantir que as pastas existem
          mkdir -p articles public

      - name: Extrair scripts e requirements da branch `main`
        run: |
          mkdir -p temp-scripts/scripts/exporters
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('temp-scripts/requirements.txt') }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências
        run: pip install -r temp-scripts/requirements.txt

      - name: Debug - Verificar caminhos no Python
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python -c "
          import os
          print('=== Current working directory ===')
          print(os.getcwd())
          print('=== Articles directory exists? ===')
          print(os.path.exists('articles'))
          print('=== original_categories.json exists? ===')
          print(os.path.exists('articles/original_categories.json'))
          print('=== Files in articles directory ===')
          if os.path.exists('articles'):
              print(os.listdir('articles'))
          else:
              print('Articles directory does not exist')
          "

      - name: Debug - Verificar conteúdo do ficheiro
        run: |
          echo "=== Conteúdo do original_categories.json ==="
          cat articles/original_categories.json
          echo ""
          echo "=== Verificar se é JSON válido ==="
          python -c "
          import json
          with open('articles/original_categories.json', 'r') as f:
              data = json.load(f)
              print('Type of data:', type(data))
              print('Data content:', data)
              if isinstance(data, list) and len(data) > 0:
                  print('First entry type:', type(data[0]))
                  print('First entry:', data[0])
          "      

      - name: Executar script de atualização de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      - name: Garantir pasta public e copiar JSONs
        run: |
          mkdir -p public
          cp articles/*.json public/

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Ficheiros JSON" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md

      - name: Commit e Push para branch `data`
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualização automática dos ficheiros JSON - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudança para commitar"
          fi