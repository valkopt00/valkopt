name: Atualizar JSON de Notícias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout completo do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Mudar para branch `data` e preparar
        run: |
          git fetch origin data || true
          if git show-ref --verify --quiet refs/remotes/origin/data; then
            git checkout data
            echo "Branch data existe - ficheiros preservados"
            ls -la articles/ || echo "Pasta articles não existe ainda"
          else
            git checkout --orphan data
            git reset --hard
            echo "Branch data criado - começando do zero"
            mkdir -p articles public
          fi
          
          # Garantir que as pastas existem
          mkdir -p articles public

      - name: Extrair scripts e requirements da branch `main`
        run: |
          mkdir -p temp-scripts/scripts/exporters
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('temp-scripts/requirements.txt') }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Verificar ficheiros existentes
        run: |
          echo "=== Ficheiros existentes ==="
          ls -la articles/ || echo "Pasta articles não existe"
          if [ -f "articles/original_categories.json" ]; then
            echo "original_categories.json existe - será preservado"
          else
            echo "original_categories.json não existe - será criado"
          fi

      - name: Instalar dependências
        run: pip install -r temp-scripts/requirements.txt

      - name: Executar script de atualização de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      - name: Verificar ficheiros finais
        run: |
          echo "=== Ficheiros após script ==="
          ls -la articles/

      - name: Garantir pasta public e copiar JSONs
        run: |
          mkdir -p public
          cp articles/*.json public/

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Ficheiros JSON" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
          echo "" >> README.md
          echo "## Ficheiros disponíveis:" >> README.md
          echo "- articles.json: Todas as notícias" >> README.md
          echo "- articles_priority.json: Notícias prioritárias" >> README.md
          echo "- articles_secondary.json: Notícias secundárias" >> README.md
          echo "- original_categories.json: Categorias originais com contadores (preservado entre execuções)" >> README.md

      - name: Commit e Push para branch `data`
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualização automática dos ficheiros JSON - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudança para commitar"
          fi