name: Atualizar JSON de Not√≠cias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      - name: Checkout completo do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Mudar para branch `data` e preparar
        run: |
          git fetch origin data || true
          if git show-ref --verify --quiet refs/remotes/origin/data; then
            git checkout data
          else
            git checkout --orphan data
            git reset --hard
          fi
          mkdir -p articles public
          
          # Criar ficheiro original_categories.json vazio se n√£o existir
          if [ ! -f "articles/original_categories.json" ]; then
            echo '{"categories": {}, "articles": {}}' > articles/original_categories.json
          fi

      - name: Extrair scripts e requirements da branch `main`
        run: |
          mkdir -p temp-scripts/scripts/exporters
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('temp-scripts/requirements.txt') }}

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar depend√™ncias
        run: pip install -r temp-scripts/requirements.txt

      - name: Executar script de atualiza√ß√£o de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      - name: Garantir pasta public e copiar ficheiros JSON
        run: |
          mkdir -p public
          # Copiar todos os ficheiros JSON gerados
          cp articles/articles.json public/
          cp articles/articles_priority.json public/
          cp articles/articles_secondary.json public/
          cp articles/articles_search.json public/  # NOVO ARQUIVO
          cp articles/original_categories.json public/
          
          # Copiar ficheiros HTML est√°ticos da branch main (se existirem)
          if git show origin/main:public/politica_de_privacidade.html > /dev/null 2>&1; then
            git show origin/main:public/politica_de_privacidade.html > public/politica_de_privacidade.html
          fi
          
          if git show origin/main:public/termos_de_utilizacao.html > /dev/null 2>&1; then
            git show origin/main:public/termos_de_utilizacao.html > public/termos_de_utilizacao.html
          fi

      - name: üì¶ Otimizar e comprimir ficheiros JSON
        run: |
          echo "üîß Aplicando compress√£o gzip aos ficheiros JSON..."
          
          cd public
          
          # Lista de ficheiros JSON para comprimir
          json_files=(
            "articles.json"
            "articles_priority.json" 
            "articles_secondary.json"
            "articles_search.json"
            "original_categories.json"
          )
          
          total_original=0
          total_compressed=0
          
          for file in "${json_files[@]}"; do
            if [ -f "$file" ]; then
              echo "üìÑ Processando $file..."
              
              # Obter tamanho original
              original_size=$(stat -c%s "$file")
              
              # Minificar JSON (remover espa√ßos desnecess√°rios)
              # Usar python para minificar de forma segura
              python3 -c "
          import json
          import sys
          try:
              with open('$file', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              with open('${file}.min', 'w', encoding='utf-8') as f:
                  json.dump(data, f, separators=(',', ':'), ensure_ascii=False)
              print('‚úÖ Minificado com sucesso')
          except Exception as e:
              print(f'‚ùå Erro ao minificar: {e}')
              # Se falhar, copiar original
              import shutil
              shutil.copy('$file', '${file}.min')
          "
              
              # Comprimir com gzip (n√≠vel m√°ximo)
              gzip -9 -c "${file}.min" > "${file}.gz"
              
              # Substituir o original pelo comprimido
              mv "${file}.gz" "$file"
              
              # Calcular tamanhos e redu√ß√£o
              compressed_size=$(stat -c%s "$file")
              reduction=$(python3 -c "print(f'{((${original_size} - ${compressed_size}) * 100) / ${original_size}:.1f}')")
              
              echo "   Original: $(numfmt --to=iec ${original_size})"
              echo "   Comprimido: $(numfmt --to=iec ${compressed_size})"
              echo "   Redu√ß√£o: ${reduction}%"
              echo ""
              
              total_original=$((total_original + original_size))
              total_compressed=$((total_compressed + compressed_size))
              
              # Cleanup
              rm -f "${file}.min"
            else
              echo "‚ö†Ô∏è Ficheiro $file n√£o encontrado"
            fi
          done
          
          # Estat√≠sticas finais
          if [ $total_original -gt 0 ]; then
            total_reduction=$(python3 -c "print(f'{(($total_original - $total_compressed) * 100) / $total_original:.1f}')")
            echo "üìä RESUMO TOTAL:"
            echo "   Original: $(numfmt --to=iec $total_original)"
            echo "   Comprimido: $(numfmt --to=iec $total_compressed)" 
            echo "   Redu√ß√£o total: ${total_reduction}%"
            echo "   Poupan√ßa: $(numfmt --to=iec $((total_original - total_compressed)))"
          fi

      - name: Verificar ficheiros gerados
        run: |
          echo "üìÅ Ficheiros na pasta articles:"
          ls -la articles/
          echo ""
          echo "üìÅ Ficheiros na pasta public (ap√≥s compress√£o):"
          ls -la public/
          echo ""
          echo "üìä Estat√≠sticas dos ficheiros JSON comprimidos:"
          cd public
          for file in *.json; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              echo "   $file: $(numfmt --to=iec $size)"
              
              # Verificar se √© v√°lido gzip
              if gzip -t "$file" 2>/dev/null; then
                echo "     ‚úÖ Compress√£o gzip v√°lida"
              else
                echo "     ‚ùå Erro na compress√£o gzip"
              fi
            fi
          done

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Ficheiros JSON Comprimidos" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
          echo "" >> README.md
          echo "## Ficheiros dispon√≠veis (comprimidos com gzip):" >> README.md
          echo "- **articles.json** - Todos os artigos (compatibilidade)" >> README.md
          echo "- **articles_priority.json** - Categorias priorit√°rias (√öltimas, Nacional, Mundo)" >> README.md
          echo "- **articles_secondary.json** - Outras categorias" >> README.md
          echo "- **articles_search.json** - Vers√£o normalizada para pesquisa" >> README.md
          echo "- **original_categories.json** - Categorias originais mapeadas" >> README.md
          echo "" >> README.md
          echo "## ‚ÑπÔ∏è Nota t√©cnica:" >> README.md
          echo "Todos os ficheiros JSON est√£o comprimidos com gzip para otimizar o download." >> README.md
          echo "Os browsers e apps modernas descomprimem automaticamente." >> README.md
          echo "" >> README.md
          echo "## üìä Estat√≠sticas atuais:" >> README.md
          cd public
          for file in *.json; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file")
              echo "- $file: $(numfmt --to=iec $size)" >> ../README.md
            fi
          done

      - name: Commit e Push para branch `data`
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Atualiza√ß√£o autom√°tica dos ficheiros JSON comprimidos - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudan√ßa para commitar"
          fi