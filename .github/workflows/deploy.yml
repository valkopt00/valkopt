name: Atualizar JSON de Not√≠cias

on:
  schedule:
    - cron: "*/15 * * * *"  # Executa a cada 15 minutos
  workflow_dispatch:

jobs:
  update-json-data:
    name: Gerar e Atualizar Branch Data
    runs-on: ubuntu-latest

    steps:
      # ‚úÖ OTIMIZA√á√ÉO 1: Checkout otimizado com fetch de ambas as branches
      - name: Checkout otimizado do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: main  # Checkout expl√≠cito da main
          token: ${{ secrets.GITHUB_TOKEN }}

      # ‚úÖ OTIMIZA√á√ÉO 2: Setup da branch data de forma otimizada
      - name: Preparar branch data
        run: |
          # Listar branches remotas para debug
          echo "Branches remotas dispon√≠veis:"
          git branch -r
          
          # Fetch e checkout da branch data se existir
          if git ls-remote --exit-code origin data; then
            echo "‚úÖ Branch data existe - fazendo fetch e checkout"
            git fetch origin data:data
            git checkout data
          else
            echo "‚ÑπÔ∏è Branch data n√£o existe - criando nova branch orphan"
            git checkout --orphan data
            git reset --hard
          fi
          
          mkdir -p articles public
          
          # Criar ficheiro original_categories.json vazio se n√£o existir
          if [ ! -f "articles/original_categories.json" ]; then
            echo '{"categories": {}, "articles": {}}' > articles/original_categories.json
          fi

      # ‚úÖ OTIMIZA√á√ÉO 3: Cache para depend√™ncias Python
      - name: Configurar cache do pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ‚úÖ OTIMIZA√á√ÉO 4: Setup Python em paralelo com extra√ß√£o de scripts
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'  # Cache autom√°tico do pip

      # ‚úÖ OTIMIZA√á√ÉO 5: Extra√ß√£o otimizada de scripts
      - name: Extrair scripts e requirements da branch main
        run: |
          mkdir -p temp-scripts/scripts/exporters
          
          # Usar origin/main j√° que estamos na branch data
          git show origin/main:requirements.txt > temp-scripts/requirements.txt
          git show origin/main:scripts/RSS_API.py > temp-scripts/scripts/RSS_API.py
          git show origin/main:scripts/__init__.py > temp-scripts/scripts/__init__.py
          git show origin/main:scripts/mappings.py > temp-scripts/scripts/mappings.py
          git show origin/main:scripts/remove_articles.py > temp-scripts/scripts/remove_articles.py
          git show origin/main:scripts/reset_counts_with_backup.py > temp-scripts/scripts/reset_counts_with_backup.py
          git show origin/main:scripts/remove_duplicates.py > temp-scripts/scripts/remove_duplicates.py
          git show origin/main:scripts/exporters/export_original_categories.py > temp-scripts/scripts/exporters/export_original_categories.py

      # ‚úÖ OTIMIZA√á√ÉO 6: Instala√ß√£o de depend√™ncias com cache
      - name: Instalar depend√™ncias
        run: |
          # Instalar com cache (o cache j√° evita reinstala√ß√µes desnecess√°rias)
          pip install -r temp-scripts/requirements.txt

      - name: Executar script de atualiza√ß√£o de JSON
        run: |
          export PYTHONPATH=$(pwd)/temp-scripts
          python temp-scripts/scripts/RSS_API.py

      # ‚úÖ OTIMIZA√á√ÉO 7: C√≥pia otimizada de ficheiros HTML
      - name: Garantir pasta public e copiar ficheiros JSON
        run: |
          mkdir -p public
          # Copiar apenas os ficheiros JSON essenciais
          cp articles/articles.json public/
          cp articles/articles_search.json public/
          cp articles/original_categories.json public/
          
          # C√≥pia otimizada de ficheiros HTML est√°ticos (com verifica√ß√£o em batch)
          for file in "politica_de_privacidade.html" "termos_de_utilizacao.html" "contacto.html" "app-ads.txt"; do
            if git cat-file -e origin/main:public/$file 2>/dev/null; then
              git show origin/main:public/$file > public/$file
            fi
          done

      - name: Verificar ficheiros gerados
        run: |
          echo "üìÅ Ficheiros na pasta articles:"
          ls -la articles/
          echo ""
          echo "üìÅ Ficheiros na pasta public:"
          ls -la public/
          echo ""
          cd public
          if [ -f "articles.json" ]; then
            size=$(stat -c%s "articles.json")
            echo "   ‚úÖ articles.json: $(numfmt --to=iec $size) (todas as not√≠cias)"
          else
            echo "   ‚ùå articles.json N√ÉO foi criado"
          fi
          
          if [ -f "articles_search.json" ]; then
            size=$(stat -c%s "articles_search.json")
            echo "   ‚úÖ articles_search.json: $(numfmt --to=iec $size) (dados de pesquisa)"
          else
            echo "   ‚ùå articles_search.json N√ÉO foi criado"
          fi
          
          if [ -f "original_categories.json" ]; then
            size=$(stat -c%s "original_categories.json")
            echo "   ‚úÖ original_categories.json: $(numfmt --to=iec $size) (mapeamento)"
          else
            echo "   ‚ùå original_categories.json N√ÉO foi criado"
          fi

      - name: Criar README informativo
        run: |
          echo "# Branch Data - Sistema JSON Simplificado" > README.md
          echo "Atualizado automaticamente em: $(date '+%Y-%m-%d %H:%M:%S')" >> README.md
          echo "" >> README.md
          echo "## üéØ Arquitetura simplificada:" >> README.md
          echo "Apenas **3 ficheiros JSON** essenciais, comprimidos automaticamente pelo Netlify (~65% redu√ß√£o):" >> README.md
          echo "" >> README.md
          echo "### üì± Para a app principal:" >> README.md
          echo "- **articles.json** - Todas as categorias e artigos (ficheiro √∫nico)" >> README.md
          echo "" >> README.md
          echo "### üîç Para funcionalidade de pesquisa:" >> README.md  
          echo "- **articles_search.json** - Dados normalizados para pesquisa" >> README.md
          echo "" >> README.md
          echo "### üóÇÔ∏è Para mapeamento de categorias:" >> README.md
          echo "- **original_categories.json** - Mapeamento de categorias originais" >> README.md
          echo "" >> README.md
          echo "## ‚ö° Performance esperada:" >> README.md
          cd public
          if [ -f "articles.json" ]; then
            size=$(stat -c%s "articles.json")
            compressed_size=$((size * 35 / 100))
            echo "- **Carregamento inicial**: ~$(numfmt --to=iec $compressed_size) (2-4 segundos)" >> ../README.md
            echo "- **Todas as categorias**: Dispon√≠veis imediatamente ap√≥s carregamento" >> ../README.md
            echo "- **Zero problemas de timing**: Sem depend√™ncias entre ficheiros" >> ../README.md
          fi

      # ‚úÖ OTIMIZA√á√ÉO 8: Commit otimizado (verifica√ß√£o mais eficiente)
      - name: Commit e Push para branch data
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          
          # Verifica√ß√£o otimizada de mudan√ßas
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Atualiza√ß√£o autom√°tica dos ficheiros JSON - $(date '+%Y-%m-%d %H:%M:%S')"
            git push origin data --force
          else
            echo "Nenhuma mudan√ßa para commitar"
          fi